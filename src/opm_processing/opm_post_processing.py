"""
Process qi2lab OPM data.

This file identifies the OPM acquisition mode and calls deskew or process projection.
"""

import warnings
warnings.filterwarnings("ignore", category=UserWarning)
warnings.simplefilter("ignore", category=FutureWarning)
import multiprocessing as mp
mp.set_start_method('spawn', force=True)

from pathlib import Path
import tensorstore as ts
from opm_processing.deskew import deskew
from opm_processing.process_projection import process_projection
from opm_processing.dataio.metadata import find_key
import json
import typer

app = typer.Typer()
app.pretty_exceptions_enable = False

@app.command()
def postprocess(
    root_path: Path,
    deconvolve: bool = False,
    max_projection: bool = True,
    flatfield_correction: bool = False,
    create_fused_projection: bool = True,
    write_fused_projection_tiff: bool = False,
    z_downsample_level: int = 2,
    time_range: tuple[int,int] = None,
    pos_range: tuple[int,int] = None,    
):
    """Postprocess qi2lab OPM dataset.
    
    This code assumes data is generated by opm-v2 GUI and the resulting data is \
    saved using OPMMirrorHandler. All revelant metadata is read from imaging \
    files, including stage transformation, camera parameters, and channels.
    
    Usage: `postprocess "/path/to/qi2lab_acquisition.zarr"`
    
    See docstring for the various options available.
    
    Outputs are in:
    - Deskewed 3D individual deskewed tiles: \
        `"/path/to/qi2lab_acquisition_deskewed.zarr"`
    - Maximum Z projected individual deskewed tiles: \
        `"/path/to/qi2lab_acquisition_max_z_deskewed.zarr"`
    - Maximum Z projection fused deskewed tiles: \
        `"/path/to/qi2lab_acquisition_max_z_fused.zarr"`
    
    Parameters
    ----------
    root_path: Path
        Path to OPM pymmcoregui zarr file.
    deconvolve: bool, default = False
        Deconvolve the data using RLGC.
    max_projection: bool, default = True
        Create a maximum projection datastore.
    flatfield_correction: bool, default = True
        Estimate and apply flatfield correction on raw data.
    create_fused_projection: bool, default = True
        Create stage position fused max Z projection.
    write_fused_projection_tiff: bool, default = False
        Write fused maxZ  projection to OME-TIFF file.
    z_downsample_level: int, default = 2
        Amount to downsample deskewed data in z.
    time_range: list[int,int], default = None
        Range of timepoints to reconstruct.
    pos_range: list[int,int], default = None
        Range of stage positions to reconstruct.     
    """
    
    # open raw datastore
    spec = {
        "driver" : "zarr",
        "kvstore" : {
            "driver" : "file",
            "path" : str(root_path)
        }
    }
    datastore = ts.open(spec).result()

    # Read metadata
    zattrs_path = root_path / Path(".zattrs")
    with open(zattrs_path, "r") as f:
        zattrs = json.load(f)

    opm_mode = str(find_key(zattrs, "mode"))
    
    # Determine if data needs to run deskew
    run_deskew = False
    if 'mirror' in opm_mode:
        run_deskew = True
    elif 'stage' in opm_mode:
        run_deskew = True
    elif 'projection' in opm_mode:
        run_deskew = False
        if max_projection:
            print("Max projections not available for OPM projections")
            max_projection = False
        
    if run_deskew:
        deskew(
            root_path=root_path,
            max_projection=max_projection,
            flatfield_correction=flatfield_correction,
            create_fused_max_projection=create_fused_projection,
            write_fused_max_projection_tiff=write_fused_projection_tiff,
            z_downsample_level=z_downsample_level,
            time_range=time_range,
            pos_range=pos_range
        )
    else:
        process_projection(
            root_path=root_path,
            deconvolve=deconvolve,
            flatfield_correction=flatfield_correction,
            create_fused_projection=create_fused_projection,
            write_fused_projection_tiff=write_fused_projection_tiff,
            time_range=time_range,
            pos_range=pos_range
    )

# entry for point for CLI        
def main():
    app()

if __name__ == "__main__":
    main()