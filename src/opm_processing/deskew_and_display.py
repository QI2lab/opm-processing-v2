"""
Deskew and display OPM data

This file is meant for quick deskew and display of qi2lab OPM results. No deconvolution and it assumes everything fits in memory.
"""

from pathlib import Path
import tensorstore as ts
import ndv
from opm_processing.imageprocessing.opmtools import deskew, downsample_axis, deskew_shape_estimator
from opm_processing.dataio.metadata import extract_channels, find_key
import json
import numpy as np

def deskew_and_display(root_path: Path,z_downsample_level=2):
    """Deskew, downsample by 2x in Z, and display OPM data.
    
    This code assumes data is generated by opm-v2 GUI and the resulting data is 
    saved using OPMMirrorHandler. All revelant metadata is read from imaging files, 
    including stage transformation, camera parameters, and channels. 
    
    Parameters
    ----------
    root_path: Path
        Path to OPM pymmcoregui zarr file.
    z_downsample_level: int, default = 2
        Amount to downsample deskewed data in z.
    """
    
    # open datastore
    spec = {
        "driver" : "zarr",
        "kvstore" : {
            "driver" : "file",
            "path" : str(root_path)
        }
    }
    datastore = ts.open(spec).result()
    
    # Read metadata
    zattrs_path = root_path / Path(".zattrs")
    with open(zattrs_path, "r") as f:
        zattrs = json.load(f)

    image_mirror_step_um = float(find_key(zattrs,"image_mirror_step_um"))
    pixel_size_um = float(find_key(zattrs,"pixel_size_um"))
    opm_tilt_deg = float(find_key(zattrs,"angle_deg"))
    
    # estimate shape of one deskewed volume
    deskewed_shape = deskew_shape_estimator(
        [datastore.shape[-3],datastore.shape[-2],datastore.shape[-1]],
        theta=opm_tilt_deg,
        distance=image_mirror_step_um,
        pixel_size=pixel_size_um
    )
    deskewed = np.zeros(
        (datastore.shape[0],datastore.shape[1],datastore.shape[2],deskewed_shape[0]//z_downsample_level,deskewed_shape[1],deskewed_shape[2]),
        dtype=np.uint16
    )
    
    for t_idx in range(datastore.shape[0]):
        for pos_idx in range(datastore.shape[1]):
            for chan_idx in range(datastore.shape[2]):
                deskewed[t_idx,pos_idx,chan_idx,:] = downsample_axis(
                    deskew(
                        np.squeeze(datastore[t_idx,pos_idx,chan_idx,:].read().result()),
                        theta=opm_tilt_deg,
                        distance=image_mirror_step_um,
                        pixel_size=pixel_size_um,
                        flip_scan=False
                    ),
                    level = z_downsample_level,
                    axis = 0
                )
    
    ndv.imshow(deskewed)

if __name__ == "__main__":
    root_path = Path(r"/mnt/opm3/20250225_opm/isolated_beads_002.zarr")
    deskew_and_display(root_path,z_downsample_level=2)